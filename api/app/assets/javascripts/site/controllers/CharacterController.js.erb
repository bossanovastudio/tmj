tmj.controller('CharacterController', function($rootScope, $scope, $http, $sce, $compile, $routeParams) {

    $rootScope.pageName = $routeParams.username;
    $rootScope.extraBodyClass = "character-profile"
    $scope.user = storage.get('user');

    var distanceTop = 0;

    $scope.currentUser = {};

    $http.get(API_URL + '/user/' + $routeParams.username + '/profile.json', {
        headers: {
            'Content-Type': 'application/json',
            'X-User-username': storage.get('user') ? storage.get('user').username : '',
            'X-User-token': storage.get('user') ? storage.get('user').authentication_token : '',
        }
    })
    .then(function(response) {
        $scope.currentUser.bio = response.data.bio;
        $scope.currentUser.username = response.data.username;
        $scope.currentUser.image = {};
        $scope.currentUser.image.url = response.data.image;
        $scope.currentUser.followers = response.data.followers;
        $scope.currentUser.following = response.data.following;

        $scope.currentUser.editor_color = response.data.editor_color;
        $scope.currentUser.editor_icon = response.data.editor_icon;
        $scope.currentUser.editor_desktop_background = response.data.editor_desktop_background;
        $scope.currentUser.editor_mobile_background = response.data.editor_mobile_background;
        $scope.currentUser.editor_menu_background = response.data.editor_menu_background;
        $scope.currentUser.editor_recommendation_ribbon = response.data.editor_recommendation_ribbon;
        $scope.currentUser.editor_avatar_hover = response.data.editor_avatar_hover;
        $scope.currentUser.editor_networks = response.data.editor_networks;

        $('head').append([
            '<style>',
            'body {',
                'background: ' + $scope.currentUser.editor_color + ' url(' + $scope.currentUser.editor_desktop_background + ') no-repeat center center fixed;!important',
            '}',
            '@media only screen and (max-device-width: 550px) {',
                'body {',
                    'background-image: image-url(' + $scope.currentUser.editor_mobile_background + ')!important;',
                    'background-size: cover!important;',
                '}',
                '.cards {',
                    'padding-top: 55px!important;',
                '}',
            '}',
            '</style>'
        ].join('\n'))

        setTimeout(function() {
            $('.box-avatar-user .avatar').css('background-image', "url("+$scope.currentUser.image+")");
        }, 1000);
        setTimeout(function() {
          $('.recommendcounter').css('opacity', '1');
          $('.recommendcounter').each(function () {
              $(this).prop('Counter',0).animate({
                  Counter: $(this).text()
              }, {
                  duration: 400,
                  easing: 'swing',
                  step: function (now) {
                      $(this).text(Math.ceil(now));
                  }
              });
          });
        }, 3500);
    });

    $scope.swipeUp = function() {
        if ($('.cards .card').length == 0) {
            return false;
        }
        distanceTop = -$(window).height();
        $('.cards').each(function(i, e) {
            var top = parseInt($(this).css('top').replace('px'));
            if (i == 0 && top == (($('.cards').length - 1) * distanceTop)) {
                distanceTop = 0;
            }
            $(this).animate({ top: top + distanceTop }, 500, 'easeOutExpo');
        });
        setTimeout(function() {
            $rootScope.animateInitial();
        }, 1000);
        $rootScope.track('swipe', 'cards', 'up');

        $('.arrowBottom').fadeOut();
    }

    $scope.followUser = function() {
        if (!storage.get('user')) {
            window.location = '/login';
        } else {
            $http.get(API_URL + '/' + $routeParams.username + '/follow.json', {
                headers: {
                    'Content-Type': 'application/json',
                    'X-User-username': storage.get('user').username,
                    'X-User-token': storage.get('user').authentication_token,
                }
            })
            .then(function(response) {
                $scope.currentUser.following = true;
                $scope.currentUser.followers++;
                $(".follow").addClass('following');
            });
        }
    }

    $scope.unFollowUser = function() {
        $http.get('/api/' + $routeParams.username + '/unfollow.json', {
            headers: {
                'Content-Type': 'application/json',
                'X-User-username': storage.get('user').username,
                'X-User-token': storage.get('user').authentication_token,
            }
        })
        .then(function(response) {
            $scope.currentUser.following = false;
            $scope.currentUser.followers--;
            $(".follow").removeClass('following');
        });
    }

});
