tmj.controller('PageController', function($rootScope, $scope, $http, $sce, $compile, $routeParams) {

    $scope.pageIsLoaded = false;

    $http.get(API_URL + '/page/1.json')
        .then(function(response) {
            $scope.pageIsLoaded = true;
            $scope.page = response.data;
            $scope.page.content = $sce.trustAsHtml($scope.page.content);
            $rootScope.pageName = $scope.page.slug;
            $('body').css({'background-image': 'url(' + $scope.page.background_page.url + ')'});
        
	    	$(function() {
			    $('.jcarousel-users')
				    .on('jcarousel:create jcarousel:reload', function() {
				        var element = $(this);

				        if ($rootScope.isMobileDevice) {
				        	var width = $(window).width();
			        	} else {
			        		var width = element.innerWidth();
			        	}

				        if (width > 900) {
				            width = width / 3;
				        } else if (width > 600) {
				            width = width / 2;
				        } 

				        element.jcarousel('items').css('width', width + 'px');
				    })
				    .jcarousel({
				        // Your configurations options
				    })
				    .jcarouselSwipe({
				    	draggable: false // by default true
				    });

			    $('.jcarousel-slider')
				    .on('jcarousel:create jcarousel:reload', function() {
				        var element = $(this);

				        if ($rootScope.isMobileDevice) {
				        	var width = $(window).width();
			        	} else {
			        		var width = element.innerWidth();
			        	}

			        	if (width > 600) {
			            	width = element.innerWidth() * 0.8;
			            }

				        // This shows 1 item at a time.
				        // Divide `width` to the number of items you want to display,
				        // eg. `width = width / 3` to display 3 items at a time.
				        element.jcarousel('items').css('width', width + 'px');
				    })
				    .jcarousel({
				        center: true,
				        wrap: 'circular'
				    })
				    .jcarouselSwipe({
				    	draggable: false // by default true
				    })
				    .jcarouselAutoscroll({
			            interval: 5000,
			            autostart: true
			        })

				if ($rootScope.isMobileDevice) {
					$('.jcarousel-remix')
					    .on('jcarousel:create jcarousel:reload', function() {
					        var element = $(this);
					        var width = $(window).width() * 0.8;
					        element.jcarousel('items').css('width', width + 'px');
					    })
					    .jcarousel({
					        center: true
					    })
					    .jcarouselSwipe({
					    	draggable: false // by default true
					    });
				}

			 	$('.jcarousel-prev')
			 		.on('jcarouselcontrol:active', function() {
		                $(this).removeClass('inactive');
		            })
		            .on('jcarouselcontrol:inactive', function() {
		                $(this).addClass('inactive');
		            })
		            .jcarouselControl({
				        target: '-=1'
				    });

			    $('.jcarousel-next')
				    .on('jcarouselcontrol:active', function() {
		                $(this).removeClass('inactive');
		            })
		            .on('jcarouselcontrol:inactive', function() {
		                $(this).addClass('inactive');
		            })
		            .jcarouselControl({
				        target: '+=1'
				    });
			});
		});
});
